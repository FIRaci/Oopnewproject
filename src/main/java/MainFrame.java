// C√°c import kh√°c gi·ªØ nguy√™n...
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.net.URL;
import java.util.Objects;
import java.util.Random;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

public class MainFrame extends JFrame {
    private final NoteController controller; // Tr∆∞·ªùng n√†y s·∫Ω ƒë∆∞·ª£c g√°n trong constructor
    private AlarmController alarmController;
    private MainMenuScreen mainMenuScreen;
    private MissionScreen missionScreen;
    private NoteEditorScreen noteEditorScreen;
    private JPanel contentPanel;
    private CardLayout cardLayout;
    private ImageSpinner imageSpinner;
    private MouseEventDispatcher mouseEventDispatcher;

    public MainFrame(NoteController controllerParam) { // ƒê·ªïi t√™n tham s·ªë ƒë·ªÉ r√µ r√†ng
        // In ra ƒë·ªÉ ki·ªÉm tra xem controllerParam c√≥ null kh√¥ng khi ƒë∆∞·ª£c truy·ªÅn v√†o
        System.out.println("[MainFrame Constructor] NoteController ƒë∆∞·ª£c truy·ªÅn v√†o: " + (controllerParam == null ? "NULL" : "KH√îNG NULL"));

        if (controllerParam == null) {
            System.err.println("L·ªñI NGHI√äM TR·ªåNG: MainFrame constructor nh·∫≠n m·ªôt NoteController null!");
            // Hi·ªÉn th·ªã l·ªói v√† c√≥ th·ªÉ tho√°t ·ª©ng d·ª•ng n·∫øu controller l√† b·∫Øt bu·ªôc
            JOptionPane.showMessageDialog(null, "L·ªói nghi√™m tr·ªçng: Controller kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o cho MainFrame.", "L·ªói Kh·ªüi ƒê·ªông", JOptionPane.ERROR_MESSAGE);
            // throw new IllegalStateException("NoteController kh√¥ng th·ªÉ null trong MainFrame constructor");
            // N·∫øu kh√¥ng throw exception, g√°n m·ªôt controller m·∫∑c ƒë·ªãnh ho·∫∑c x·ª≠ l√Ω ph√π h·ª£p
            // T·∫°m th·ªùi, ƒë·ªÉ tr√°nh l·ªói ngay l·∫≠p t·ª©c ·ªü c√°c d√≤ng sau, ta kh√¥ng l√†m g√¨ th√™m ·ªü ƒë√¢y,
            // nh∆∞ng ·ª©ng d·ª•ng s·∫Ω kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng.
            this.controller = null; // G√°n null ƒë·ªÉ r√µ r√†ng
        } else {
            this.controller = controllerParam; // G√°n tham s·ªë cho tr∆∞·ªùng c·ªßa l·ªõp
        }

        // Ch·ªâ kh·ªüi t·∫°o AlarmController n·∫øu this.controller kh√¥ng null
        if (this.controller != null) {
            System.out.println("[MainFrame Constructor] ƒêang t·∫°o AlarmController v·ªõi controller: " + this.controller);
            this.alarmController = new AlarmController(this.controller, this);
        } else {
            System.err.println("[MainFrame Constructor] C·∫£nh b√°o: controller l√† null, AlarmController s·∫Ω kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch.");
            // this.alarmController c√≥ th·ªÉ v·∫´n l√† null, c·∫ßn x·ª≠ l√Ω ·ªü nh·ªØng n∆°i d√πng ƒë·∫øn n√≥
        }

        initializeUI();
        setupShortcuts();
        System.out.println("[MainFrame Constructor] Ho√†n t·∫•t constructor.");
    }

    private void initializeUI() {
        System.out.println("[MainFrame initializeUI] B·∫Øt ƒë·∫ßu. Controller hi·ªán t·∫°i: " + (this.controller == null ? "NULL" : "KH√îNG NULL"));
        setTitle("XiNoClo - Note App");
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                confirmAndExit();
            }
        });
        setMinimumSize(new Dimension(800, 550));
        setSize(900, 650);
        setLocationRelativeTo(null);

        JPanel topBarPanel = new JPanel(new BorderLayout(0, 0));
        JButton notesButton = new JButton("üìù Notes");
        notesButton.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 14));
        notesButton.setFocusPainted(false);
        notesButton.addActionListener(e -> showScreen("Notes"));

        JButton missionsButton = new JButton("üéØ Missions");
        missionsButton.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 14));
        missionsButton.setFocusPainted(false);
        missionsButton.addActionListener(e -> showScreen("Missions"));

        JPanel tabBarContainer = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 8));
        tabBarContainer.setBorder(BorderFactory.createEmptyBorder(5, 0, 0, 0));

        imageSpinner = new ImageSpinner(50, "/images/spinner.jpg");
        imageSpinner.setToolTipText("Rotating Indicator");
        imageSpinner.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    HelpScreen.showDialog(MainFrame.this);
                }
            }
        });

        mouseEventDispatcher = new MouseEventDispatcher(imageSpinner, this);
        mouseEventDispatcher.addMouseMotionListener(this);

        tabBarContainer.add(notesButton);
        tabBarContainer.add(imageSpinner);
        tabBarContainer.add(missionsButton);
        topBarPanel.add(tabBarContainer, BorderLayout.CENTER);

        cardLayout = new CardLayout();
        contentPanel = new JPanel(cardLayout);

        // S·ª≠ d·ª•ng tr∆∞·ªùng this.controller m·ªôt c√°ch t∆∞·ªùng minh
        if (this.controller != null) {
            System.out.println("[MainFrame initializeUI] ƒêang t·∫°o MainMenuScreen v·ªõi controller: " + this.controller);
            mainMenuScreen = new MainMenuScreen(this.controller, this);
            System.out.println("[MainFrame initializeUI] ƒêang t·∫°o MissionScreen v·ªõi controller: " + this.controller);
            missionScreen = new MissionScreen(this.controller, this);

            contentPanel.add(mainMenuScreen, "Notes");
            contentPanel.add(missionScreen, "Missions");

            mouseEventDispatcher.addMouseMotionListener(mainMenuScreen);
            mouseEventDispatcher.addMouseMotionListener(missionScreen);
        } else {
            System.err.println("[MainFrame initializeUI] L·ªñI: controller l√† null, kh√¥ng th·ªÉ t·∫°o MainMenuScreen ho·∫∑c MissionScreen.");
            // Hi·ªÉn th·ªã m·ªôt panel l·ªói ho·∫∑c th√¥ng b√°o cho ng∆∞·ªùi d√πng
            JPanel errorPanel = new JPanel(new BorderLayout());
            errorPanel.add(new JLabel("L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ t·∫£i giao di·ªán ch√≠nh do controller b·ªã l·ªói.", SwingConstants.CENTER), BorderLayout.CENTER);
            contentPanel.add(errorPanel, "ErrorScreen");
            cardLayout.show(contentPanel, "ErrorScreen");
        }

        add(topBarPanel, BorderLayout.NORTH);
        add(contentPanel, BorderLayout.CENTER);

        // T·∫°m th·ªùi comment out vi·ªác √°p d·ª•ng theme cho ƒë·∫øn khi controller ·ªïn ƒë·ªãnh
        // if (this.controller != null) {
        //     applyTheme(this.controller.getCurrentTheme().equals("dark"));
        // } else {
        //     applyTheme(false); // M·∫∑c ƒë·ªãnh light theme n·∫øu controller l·ªói
        // }
        applyTheme(false); // M·∫∑c ƒë·ªãnh light theme

        try {
            String[] iconNames = {
                    "Acheron.jpg", "Aglaea.jpg", "BlackSwan.jpg", "Bronya.jpg", "Castroice.jpg", "Clara.jpg",
                    "Feixiao.jpg", "Firefly.jpg", "Fugue.jpg", "FuXuan.jpg", "Hanabi.jpg", "Herta.jpg",
                    "Himeko.jpg", "HuoHuo.jpg", "Jade.jpg", "Jingliu.jpg", "Kafka.jpg", "Lingsha.jpg",
                    "Robin.jpg", "RuanMei.jpg", "Seele.jpg", "SilverWolf.jpg", "Tribbie.jpg", "Yunli.jpg"
            };
            Random random = new Random();
            String randomIconName = iconNames[random.nextInt(iconNames.length)];
            URL appIconUrl = getClass().getResource("/images/" + randomIconName);
            if (appIconUrl != null) {
                setIconImage(new ImageIcon(appIconUrl).getImage());
            } else {
                System.err.println("Kh√¥ng th·ªÉ t·∫£i icon ·ª©ng d·ª•ng: /images/" + randomIconName);
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫£i icon ·ª©ng d·ª•ng: " + e.getMessage());
        }

        if (this.controller != null) { // Ch·ªâ show "Notes" n·∫øu controller v√† mainMenuScreen ƒë√£ ƒë∆∞·ª£c t·∫°o
            showScreen("Notes");
        }
        System.out.println("[MainFrame initializeUI] Ho√†n t·∫•t.");
    }

    private void applyTheme(boolean switchToDark) {
        // ... (gi·ªØ nguy√™n)
        try {
            if (switchToDark) {
                UIManager.setLookAndFeel(new FlatDarkLaf());
            } else {
                UIManager.setLookAndFeel(new FlatLightLaf());
            }
            SwingUtilities.updateComponentTreeUI(this);
            if (imageSpinner != null) {
                imageSpinner.repaint();
            }
        } catch (UnsupportedLookAndFeelException e) {
            JOptionPane.showMessageDialog(this, "Failed to set theme: " + e.getMessage(), "Theme Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void showScreen(String screenName) {
        // ... (gi·ªØ nguy√™n)
        if ("NoteEditor".equals(screenName) && getNoteEditorScreenInstance() == null) {
            // NoteEditorScreen ƒë∆∞·ª£c t·∫°o on-demand
        }
        cardLayout.show(contentPanel, screenName);
        contentPanel.requestFocusInWindow();
    }

    private NoteEditorScreen getNoteEditorScreenInstance() {
        // ... (gi·ªØ nguy√™n, nh∆∞ng ki·ªÉm tra this.controller tr∆∞·ªõc khi t·∫°o NoteEditorScreen)
        if (this.controller == null) {
            System.err.println("L·ªñI: Kh√¥ng th·ªÉ t·∫°o NoteEditorScreen v√¨ controller l√† null.");
            // C√≥ th·ªÉ hi·ªÉn th·ªã l·ªói ho·∫∑c kh√¥ng l√†m g√¨ c·∫£
            return null;
        }
        boolean found = false;
        for (Component comp : contentPanel.getComponents()) {
            if (comp == noteEditorScreen) {
                found = true;
                break;
            }
        }
        if (noteEditorScreen == null || !found) {
            noteEditorScreen = new NoteEditorScreen(this, this.controller, null);
            contentPanel.add(noteEditorScreen, "NoteEditor");
            contentPanel.revalidate();
            contentPanel.repaint();
            mouseEventDispatcher.addMouseMotionListener(noteEditorScreen);
        }
        return noteEditorScreen;
    }

    public void showAddNoteScreen() {
        // ... (gi·ªØ nguy√™n)
        NoteEditorScreen editor = getNoteEditorScreenInstance();
        if (editor != null) { // Ki·ªÉm tra null
            editor.setNote(null);
            showScreen("NoteEditor");
        }
    }

    public void showNoteDetailScreen(Note note) {
        // ... (gi·ªØ nguy√™n)
        NoteEditorScreen editor = getNoteEditorScreenInstance();
        if (editor != null) { // Ki·ªÉm tra null
            editor.setNote(note);
            showScreen("NoteEditor");
        }
    }

    public void showMainMenuScreen() {
        // ... (gi·ªØ nguy√™n)
        showScreen("Notes");
        if (mainMenuScreen != null) { // Ki·ªÉm tra null
            mainMenuScreen.refresh();
        } else if (this.controller == null) {
            cardLayout.show(contentPanel, "ErrorScreen"); // Hi·ªÉn th·ªã m√†n h√¨nh l·ªói n·∫øu mainMenuScreen kh√¥ng th·ªÉ t·∫°o
        }
    }

    public void showMissionsScreen() {
        // ... (gi·ªØ nguy√™n)
        showScreen("Missions");
        if (missionScreen != null) { // Ki·ªÉm tra null
            missionScreen.refreshMissions();
        }
    }

    public void openCanvasPanel() {
        // ... (gi·ªØ nguy√™n, nh∆∞ng ki·ªÉm tra this.controller tr∆∞·ªõc khi g·ªçi controller.getFolders())
        if (this.controller == null) {
            JOptionPane.showMessageDialog(this, "L·ªói: Controller ch∆∞a s·∫µn s√†ng ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™.", "L·ªói Controller", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // ... (ph·∫ßn c√≤n l·∫°i c·ªßa ph∆∞∆°ng th·ª©c gi·ªØ nguy√™n)
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        java.util.List<Folder> folders = controller.getFolders();
        if (folders == null || folders.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No folders found to display statistics.", "Statistics", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        java.util.List<Note> allNotes = controller.getNotes();
        if (allNotes == null) {
            JOptionPane.showMessageDialog(this, "Could not retrieve notes for statistics.", "Statistics Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (Folder folder : folders) {
            long noteCount = allNotes.stream()
                    .filter(note -> note.getFolder() != null && note.getFolder().getId() == folder.getId())
                    .count();
            dataset.addValue(noteCount, "Notes", folder.getName());
        }

        JFreeChart chart = ChartFactory.createBarChart(
                "Note Count by Folder", "Folder", "Number of Notes", dataset);

        chart.setBackgroundPaint(UIManager.getColor("Panel.background"));
        if (chart.getTitle() != null) chart.getTitle().setPaint(UIManager.getColor("Label.foreground"));
        if (chart.getCategoryPlot() != null) {
            chart.getCategoryPlot().getDomainAxis().setLabelPaint(UIManager.getColor("Label.foreground"));
            chart.getCategoryPlot().getDomainAxis().setTickLabelPaint(UIManager.getColor("Label.foreground"));
            chart.getCategoryPlot().getRangeAxis().setLabelPaint(UIManager.getColor("Label.foreground"));
            chart.getCategoryPlot().getRangeAxis().setTickLabelPaint(UIManager.getColor("Label.foreground"));
            chart.getCategoryPlot().setBackgroundPaint(UIManager.getColor("TextField.background"));
        }
        if (chart.getLegend() != null) chart.getLegend().setItemPaint(UIManager.getColor("Label.foreground"));

        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(600, 400));
        JDialog dialog = new JDialog(this, "Statistics", true);
        dialog.setLayout(new BorderLayout());
        dialog.add(chartPanel, BorderLayout.CENTER);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        mouseEventDispatcher.addMouseMotionListenerToWindow(dialog);
        dialog.setVisible(true);
    }

    private void confirmAndExit() {
        System.out.println("[MainFrame confirmAndExit] B·∫Øt ƒë·∫ßu qu√° tr√¨nh tho√°t...");
        int confirm = JOptionPane.showConfirmDialog(MainFrame.this,
                "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t XiNoClo?", "X√°c Nh·∫≠n Tho√°t",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            if (this.alarmController != null) {
                System.out.println("[MainFrame confirmAndExit] ƒêang d·ª´ng AlarmController...");
                this.alarmController.stopSoundAndScheduler();
            }
            // Th√™m l·ªánh g·ªçi saveData() ·ªü ƒë√¢y
            if (this.controller != null) {
                NoteService service = controller.getNoteService(); // C·∫ßn getter cho NoteService trong NoteController
                if (service != null) {
                    NoteManager manager = service.getNoteManager(); // C·∫ßn getter cho NoteManager trong NoteService
                    if (manager != null) {
                        System.out.println("[MainFrame confirmAndExit] ƒêang l∆∞u d·ªØ li·ªáu cu·ªëi c√πng...");
                        manager.saveData();
                    } else {
                        System.err.println("[MainFrame confirmAndExit] L·ªói: NoteManager l√† null, kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu khi tho√°t.");
                    }
                } else {
                    System.err.println("[MainFrame confirmAndExit] L·ªói: NoteService l√† null, kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu khi tho√°t.");
                }
            } else {
                System.err.println("[MainFrame confirmAndExit] L·ªói: Controller l√† null, kh√¥ng th·ªÉ truy c·∫≠p NoteManager ƒë·ªÉ l∆∞u.");
            }
            System.out.println("[MainFrame confirmAndExit] ƒêang tho√°t ·ª©ng d·ª•ng...");
            System.exit(0);
        } else {
            System.out.println("[MainFrame confirmAndExit] Ng∆∞·ªùi d√πng ƒë√£ h·ªßy tho√°t.");
        }
    }

    private void setupShortcuts() {
        // ... (gi·ªØ nguy√™n, nh∆∞ng ƒë·∫£m b·∫£o this.controller kh√¥ng null khi c√°c action ƒë∆∞·ª£c th·ª±c thi)
        if (this.controller == null) {
            System.err.println("L·ªñI: Controller l√† null trong setupShortcuts. Ph√≠m t·∫Øt c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông.");
            return; // Kh√¥ng thi·∫øt l·∫≠p ph√≠m t·∫Øt n·∫øu controller kh√¥ng c√≥
        }
        // ... (ph·∫ßn c√≤n l·∫°i c·ªßa setupShortcuts gi·ªØ nguy√™n)
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = getRootPane().getActionMap();

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q, KeyEvent.CTRL_DOWN_MASK), "exitApp");
        actionMap.put("exitApp", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { confirmAndExit(); }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_W, KeyEvent.CTRL_DOWN_MASK), "toggleTheme");
        actionMap.put("toggleTheme", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (controller != null) controller.changeTheme();
            }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_1, KeyEvent.CTRL_DOWN_MASK), "showNotesScreen");
        actionMap.put("showNotesScreen", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { showMainMenuScreen(); }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_2, KeyEvent.CTRL_DOWN_MASK), "showMissionsScreen");
        actionMap.put("showMissionsScreen", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { showMissionsScreen(); }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK), "addNoteGlobal");
        actionMap.put("addNoteGlobal", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { showAddNoteScreen(); }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK), "addFolderGlobal");
        actionMap.put("addFolderGlobal", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (controller == null) return; // Ki·ªÉm tra null
                String name = JOptionPane.showInputDialog(MainFrame.this, "Enter folder name:");
                if (name != null && !name.trim().isEmpty()) {
                    controller.addNewFolder(name.trim());
                    if (mainMenuScreen != null && mainMenuScreen.isShowing()) {
                        mainMenuScreen.refreshFolderPanel();
                    }
                }
            }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), "showShortcutsDialog");
        actionMap.put("showShortcutsDialog", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                HelpScreen dialog = new HelpScreen(MainFrame.this);
                mouseEventDispatcher.addMouseMotionListenerToWindow(dialog);
                dialog.setVisible(true);
            }
        });
    }

    public void triggerThemeUpdate(boolean isNowDark) {
        applyTheme(isNowDark);
    }

    public MouseEventDispatcher getMouseEventDispatcher() {
        return mouseEventDispatcher;
    }

    // C·∫ßn th√™m c√°c getter n√†y ƒë·ªÉ confirmAndExit() c√≥ th·ªÉ truy c·∫≠p NoteManager
    public NoteController getAppController() { // ƒê·ªïi t√™n ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n v·ªõi tr∆∞·ªùng 'controller'
        return this.controller;
    }
}
